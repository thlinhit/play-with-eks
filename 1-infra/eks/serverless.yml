service: ${self:custom.servicePrefix}-eks
frameworkVersion: '3'

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  servicePrefix: thlinh

provider:
  stage: local
  region: us-east-1
  name: aws

#############
# RESOURCES #
#############
resources:
  Parameters:
    vpcId:
      Type: String
      Default: ${param:vpcId}
    EKSVersion:
      Type: Number
      Default: ${param:eksVersion}
    EKSClusterName:
      Type: String
      Default: ${param:eksClusterName}
    SubnetOne:
      Type: String
      Default: ${param:subnetOne}
    SubnetTwo:
      Type: String
      Default: ${param:subnetTwo}
    SubnetThree:
      Type: String
      Default: ${param:subnetThree}
  Resources:
    EksKubernetesServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: EksKubernetesServiceRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - eks.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/AmazonEKSClusterPolicy'
          - 'arn:aws:iam::aws:policy/AmazonEKSServicePolicy'

    # To protect EKS Master Management Port
    KubernetesClusterMasterSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow EKS Cluster communication with worker nodes
        VpcId: !Ref vpcId
        #        SecurityGroupEgress:
        #          - IpProtocol: -1
        #            fromPort: -1
        #            toPort: -1
        #            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-eks-master-sg

    # OPTIONAL: Allow inbound traffic from your local workstation external IP
    #           to the Kubernetes. You will need to replace A.B.C.D below with
    #           your real IP. Services like icanhazip.com can help you find this.
#    KubernetesClusterMasterFromWorkstationSecurityGroupRule:
#      Type: AWS::EC2::SecurityGroupIngress
#      Properties:
#        #        CidrIp: A.B.C.D/32
#        CidrIp: 104.28.119.144/32
#        Description: Allow workstation to communicate with the EKS cluster API Server
#        FromPort: 443
#        IpProtocol: tcp
#        ToPort: 443
#        GroupId:
#          Ref: KubernetesClusterMasterSecurityGroup

    KubernetesCluster:
      Type: AWS::EKS::Cluster
      Properties:
        Name: !Ref EKSClusterName
        ResourcesVpcConfig:
          EndpointPublicAccess: false # False if EKS is in private
          EndpointPrivateAccess: true # True if EKS is in private
          SecurityGroupIds:
            - !Ref KubernetesClusterMasterSecurityGroup
          SubnetIds:
            - !Ref SubnetOne
            - !Ref SubnetTwo
            - !Ref SubnetThree
        RoleArn: !GetAtt EksKubernetesServiceRole.Arn
        Version: !Ref EKSVersion
  Outputs:
    KubernetesClusterName:
      Description: "EKS Cluster Name"
      Value: !Ref KubernetesCluster
    KubernetesClusterEndpoint:
      Description: Endpoint for your Kubernetes API server
      Value:
        Fn::GetAtt: [ KubernetesCluster, Endpoint ]
    KubernetesClusterCertificateAuthorityData:
      Description: Certificate authority data for your Kubernetes API server
      Value: !GetAtt KubernetesCluster.CertificateAuthorityData