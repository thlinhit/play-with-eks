service: ${self:custom.servicePrefix}-eks-worker
frameworkVersion: '3'

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  servicePrefix: thlinh

provider:
  stage: local
  region: us-east-1
  name: aws

#############
# RESOURCES #
#############
resources:
  Parameters:
    vpcId:
      Type: String
      Default: ${param:vpcId}
    SubnetOne:
      Type: String
      Default: ${param:subnetOne}
    SubnetTwo:
      Type: String
      Default: ${param:subnetTwo}
    SubnetThree:
      Type: String
      Default: ${param:subnetThree}
    InfrastructureBaseSecurityGroup:
      Type: String
      Default: ${param:infrastructureBaseSecurityGroup}
    ManagedSgTxToolingBaseSecurityGroup:
      Type: String
      Default: ${param:managedSgTxToolingBaseSecurityGroup}
    AmazonLinuxAMIID:
      Type: String
      Default: ${param:amiId}
    AMIInstanceType:
      Type: String
      Default: ${param:amiIdInstanceType}
    SpotPrice:
      Description: Spot Price (Only Spot market price is charged, up to max of On-Demand price. Value here is only used to prevent EC2 instance launch if Spot market price exceeds this value.)
      Type: Number
      Default: 1
    NodeVolumeSize:
      Type: Number
      Description: Node volume size
      Default: 20
    KubernetesClusterName:
      Type: String
      Default: ${param:kubernetesClusterName}
    KubernetesClusterEndpoint:
      Type: String
      Default: ${param:kubernetesClusterEndpoint}
    KubernetesClusterMasterSecurityGroup:
      Type: String
      Default: ${param:kubernetesClusterSecurityGroup}
    KubernetesClusterCertificateAuthorityData:
      Type: String
      Default: ${param:kubernetesClusterCertificateAuthorityData}
    KubernetesCluster:
      Type: String
      Default: ${param:kubernetesCluster}
  Resources:
    ####################################
    #  WORKER NODE SECURITY GROUPS
    ####################################
    NodeInstanceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: EKSWorkerNodeInstanceRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: "/"
        Policies:
          - PolicyName: node
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:Describe*
                    - ecr:GetAuthorizationToken
                    - ecr:BatchCheckLayerAvailability
                    - ecr:GetDownloadUrlForLayer
                    - ecr:GetRepositoryPolicy
                    - ecr:DescribeRepositories
                    - ecr:ListImages
                    - ecr:DescribeImages
                    - ecr:BatchGetImage
                  Resource: '*'
          - PolicyName: cni
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DescribeInstances
                    - ec2:AttachNetworkInterface
                    - ec2:CreateNetworkInterface
                    - ec2:DeleteNetworkInterface
                    - ec2:DetachNetworkInterface
                    - ec2:ModifyNetworkInterfaceAttribute
                    - ec2:AssignPrivateIpAddresses
                    - ec2:CreateTags
                    - tag:TagResources
                  Resource: '*'
          - PolicyName: eks
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - eks:DescribeCluster
                  Resource: '*'
          - PolicyName: s3-management
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:GetObject
                    - s3:ListBucket
                    - s3:DeleteObject
                  Resource:
                    - '*' # Recheck
                - Effect: Allow
                  Action:
                    - s3:HeadBucket
                  Resource:
                    - '*'
          - PolicyName: ClusterAutoscaler
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:DescribeRegions
                    - ec2:DescribeInstances
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - ecr:GetAuthorizationToken
                    - ecr:BatchCheckLayerAvailability
                    - ecr:GetDownloadUrlForLayer
                    - ecr:GetRepositoryPolicy
                    - ecr:DescribeRepositories
                    - ecr:ListImages
                    - ecr:BatchGetImage
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - autoscaling:DescribeAutoScalingGroups
                    - autoscaling:DescribeAutoScalingInstances
                    - autoscaling:DescribeLaunchConfigurations
                    - autoscaling:SetDesiredCapacity
                    - autoscaling:DescribeTags
                    - autoscaling:TerminateInstanceInAutoScalingGroup
                  Resource: '*'

    # we need to describe AWS::IAM::InstanceProfile to provide EKS Nodes with appropriate permissions
    NodeInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: /
        Roles:
          - !Ref NodeInstanceRole

    NodeSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for all nodes in the EKS cluster
        VpcId: !Ref vpcId
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-workers-sg

    NodeSecurityGroupIngress:
      Type: AWS::EC2::SecurityGroupIngress
      DependsOn: NodeSecurityGroup
      Properties:
        Description: Allow node to communicate with each other
        GroupId: !Ref NodeSecurityGroup
        SourceSecurityGroupId: !Ref NodeSecurityGroup
        IpProtocol: '-1'
        FromPort: 0
        ToPort: 65535

    NodeSecurityGroupFromWorkstationIngress:
      Type: AWS::EC2::SecurityGroupIngress
      DependsOn: NodeSecurityGroup
      Properties:
        Description: Allow workstation to connect to EC2 nodes (for debugging)
        GroupId: !Ref NodeSecurityGroup
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.90.64.0/19

    NodeSecurityGroupFromControlPlaneIngress:
      Type: AWS::EC2::SecurityGroupIngress
      DependsOn: NodeSecurityGroup
      Properties:
        Description: >-
          Allow worker Kubelets and pods to receive communication from the cluster
          control plane
        GroupId: !Ref NodeSecurityGroup
        SourceSecurityGroupId: !Ref KubernetesClusterMasterSecurityGroup
        IpProtocol: tcp
        FromPort: 1025
        ToPort: 65535
    KubernetesClusterMasterSecurityGroupIngressFromNodes:
      Type: AWS::EC2::SecurityGroupIngress
      DependsOn: NodeSecurityGroup
      Properties:
        Description: >-
          Allow pods running extension API servers on port 443 to receive
          communication from cluster control plane
        GroupId: !Ref KubernetesClusterMasterSecurityGroup
        SourceSecurityGroupId: !Ref NodeSecurityGroup
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
    ControlPlaneEgressToNodeSecurityGroupOn443:
      Type: AWS::EC2::SecurityGroupEgress
      Properties:
        Description: >-
          Allow the cluster control plane to communicate with pods running
          extension API servers on port 443
        GroupId: !Ref KubernetesClusterMasterSecurityGroup
        DestinationSecurityGroupId: !Ref NodeSecurityGroup
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
    ControlPlaneEgressToNodeSecurityGroup:
      Type: AWS::EC2::SecurityGroupEgress
      Properties:
        Description: >-
          Allow the cluster control plane to communicate with worker Kubelet and
          pods
        GroupId: !Ref KubernetesClusterMasterSecurityGroup
        DestinationSecurityGroupId: !Ref NodeSecurityGroup
        IpProtocol: tcp
        FromPort: 1025
        ToPort: 65535


    ####################################
    #  WORKER NODE INSTANCES
    ####################################
    SpotNodeLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        AssociatePublicIpAddress: false # https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html
        IamInstanceProfile: !Ref NodeInstanceProfile
        ImageId: !Ref AmazonLinuxAMIID
        InstanceType: !Ref AMIInstanceType
        SpotPrice: !Ref SpotPrice
        SecurityGroups:
          - !Ref NodeSecurityGroup
          - !Ref InfrastructureBaseSecurityGroup
          - !Ref ManagedSgTxToolingBaseSecurityGroup
        # Refer: https://repost.aws/knowledge-center/eks-worker-nodes-cluster
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: !Ref NodeVolumeSize
              VolumeType: gp2
              DeleteOnTermination: true
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              set -o xtrace
              /etc/eks/bootstrap.sh ${KubernetesCluster}
              /opt/aws/bin/cfn-signal --exit-code $? \
                       --stack  ${AWS::StackName} \
                       --resource NodeGroup  \
                       --region ${AWS::Region}

    SpotNodeGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        DesiredCapacity: 1
        LaunchConfigurationName: !Ref SpotNodeLaunchConfig
        MinSize: 0
        MaxSize: 3
        VPCZoneIdentifier:
          - !Ref SubnetOne
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-nodes
            PropagateAtLaunch: true
          - Key:
              Fn::Join:
                - "/"
                - - "kubernetes.io"
                  - "cluster"
                  - "${self:service}-${self:provider.stage}"
            Value: 'owned'
            PropagateAtLaunch: 'true'
      UpdatePolicy:
        AutoScalingRollingUpdate:
          MinInstancesInService: 0
          MaxBatchSize: 1

    # For Testing
    EC2InstanceConnectEndpoint:
      Type: AWS::EC2::InstanceConnectEndpoint
      Properties:
        SecurityGroupIds:
          - !Ref InfrastructureBaseSecurityGroup
          - !Ref ManagedSgTxToolingBaseSecurityGroup
        SubnetId: !Ref SubnetOne
        Tags:
          - Key: Name
            Value: VPC EC2 ICE