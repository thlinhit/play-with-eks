service: ${self:custom.servicePrefix}-eks
frameworkVersion: '3'

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  servicePrefix: thlinh

provider:
  stage: local
  region: us-east-1
  name: aws

#############
# RESOURCES #
#############
resources:
  Parameters:
    vpcId:
      Type: String
      Default: ${param:vpcId}
    EKSVersion:
      Type: Number
      Default: ${param:eksVersion}
    SubnetOne:
      Type: String
      Default: ${param:subnetOne}
    SubnetTwo:
      Type: String
      Default: ${param:subnetTwo}
    SubnetThree:
      Type: String
      Default: ${param:subnetThree}
    InfrastructureBaseSecurityGroup:
      Type: String
      Default: ${param:infrastructureBaseSecurityGroup}
    ManagedSgTxToolingBaseSecurityGroup:
      Type: String
      Default: ${param:managedSgTxToolingBaseSecurityGroup}
    AmazonLinuxAMIID:
      Type: String
      Default: ${param:amiId}
  Resources:
    EksKubernetesServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: EksKubernetesServiceRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - eks.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/AmazonEKSClusterPolicy'
          - 'arn:aws:iam::aws:policy/AmazonEKSServicePolicy'

    # To protect EKS Master Management Port
    KubernetesClusterMasterSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow EKS Cluster communication with worker nodes
        VpcId: !Ref vpcId
        #        SecurityGroupEgress:
        #          - IpProtocol: -1
        #            fromPort: -1
        #            toPort: -1
        #            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-eks-master-sg

    # OPTIONAL: Allow inbound traffic from your local workstation external IP
    #           to the Kubernetes. You will need to replace A.B.C.D below with
    #           your real IP. Services like icanhazip.com can help you find this.
#    KubernetesClusterMasterFromWorkstationSecurityGroupRule:
#      Type: AWS::EC2::SecurityGroupIngress
#      Properties:
#        #        CidrIp: A.B.C.D/32
#        CidrIp: 104.28.119.144/32
#        Description: Allow workstation to communicate with the EKS cluster API Server
#        FromPort: 443
#        IpProtocol: tcp
#        ToPort: 443
#        GroupId:
#          Ref: KubernetesClusterMasterSecurityGroup

    KubernetesCluster:
      Type: AWS::EKS::Cluster
      Properties:
        Name: ${self:service}-${self:provider.stage}-eks
        ResourcesVpcConfig:
          SecurityGroupIds:
            - !Ref KubernetesClusterMasterSecurityGroup
          SubnetIds:
            - !Ref SubnetOne
            - !Ref SubnetTwo
            - !Ref SubnetThree
        RoleArn: !GetAtt EksKubernetesServiceRole.Arn
        Version: !Ref EKSVersion


    ####################################
    #  WORKER NODE SECURITY GROUPS
    ####################################
    NodeInstanceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: EKSWorkerNodeInstanceRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: "/"
        Policies:
          - PolicyName: node
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:Describe*
                    - ecr:GetAuthorizationToken
                    - ecr:BatchCheckLayerAvailability
                    - ecr:GetDownloadUrlForLayer
                    - ecr:GetRepositoryPolicy
                    - ecr:DescribeRepositories
                    - ecr:ListImages
                    - ecr:DescribeImages
                    - ecr:BatchGetImage
                  Resource: '*'
          - PolicyName: cni
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DescribeInstances
                    - ec2:AttachNetworkInterface
                    - ec2:CreateNetworkInterface
                    - ec2:DeleteNetworkInterface
                    - ec2:DetachNetworkInterface
                    - ec2:ModifyNetworkInterfaceAttribute
                    - ec2:AssignPrivateIpAddresses
                    - ec2:CreateTags
                    - tag:TagResources
                  Resource: '*'
          - PolicyName: eks
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - eks:DescribeCluster
                  Resource: '*'
          - PolicyName: s3-management
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:GetObject
                    - s3:ListBucket
                    - s3:DeleteObject
                  Resource:
                    - '*' # Recheck
                - Effect: Allow
                  Action:
                    - s3:HeadBucket
                  Resource:
                    - '*'
          - PolicyName: ClusterAutoscaler
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:DescribeRegions
                    - ec2:DescribeInstances
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - ecr:GetAuthorizationToken
                    - ecr:BatchCheckLayerAvailability
                    - ecr:GetDownloadUrlForLayer
                    - ecr:GetRepositoryPolicy
                    - ecr:DescribeRepositories
                    - ecr:ListImages
                    - ecr:BatchGetImage
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - autoscaling:DescribeAutoScalingGroups
                    - autoscaling:DescribeAutoScalingInstances
                    - autoscaling:DescribeLaunchConfigurations
                    - autoscaling:SetDesiredCapacity
                    - autoscaling:DescribeTags
                    - autoscaling:TerminateInstanceInAutoScalingGroup
                  Resource: '*'

    # we need to describe AWS::IAM::InstanceProfile to provide EKS Nodes with appropriate permissions
    NodeInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: /
        Roles:
          - !Ref NodeInstanceRole

    NodeSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for all nodes in the EKS cluster
        VpcId: !Ref vpcId
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-workers-sg

    NodeSecurityGroupIngress:
      Type: AWS::EC2::SecurityGroupIngress
      DependsOn: NodeSecurityGroup
      Properties:
        Description: Allow node to communicate with each other
        GroupId: !Ref NodeSecurityGroup
        SourceSecurityGroupId: !Ref NodeSecurityGroup
        IpProtocol: '-1'
        FromPort: 0
        ToPort: 65535

    NodeSecurityGroupFromWorkstationIngress:
      Type: AWS::EC2::SecurityGroupIngress
      DependsOn: NodeSecurityGroup
      Properties:
        Description: Allow workstation to connect to EC2 nodes (for debugging)
        GroupId: !Ref NodeSecurityGroup
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.90.64.0/19

    NodeSecurityGroupFromControlPlaneIngress:
      Type: AWS::EC2::SecurityGroupIngress
      DependsOn: NodeSecurityGroup
      Properties:
        Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
        GroupId: !Ref NodeSecurityGroup
        SourceSecurityGroupId: !Ref KubernetesClusterMasterSecurityGroup
        IpProtocol: tcp
        FromPort: 1025
        ToPort: 65535
    KubernetesClusterMasterSecurityGroupIngressFromNodes:
      Type: AWS::EC2::SecurityGroupIngress
      DependsOn: NodeSecurityGroup
      Properties:
        Description: Allow pods to communicate with the cluster API Server
        GroupId: !Ref KubernetesClusterMasterSecurityGroup
        SourceSecurityGroupId: !Ref NodeSecurityGroup
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443


    ####################################
    #  WORKER NODE INSTANCES
    ####################################
    SpotNodeLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        AssociatePublicIpAddress: true # https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html
        IamInstanceProfile: !Ref NodeInstanceProfile
        ImageId: !Ref AmazonLinuxAMIID
        InstanceType: t2.small
        SpotPrice: '1'
        SecurityGroups:
          - !Ref NodeSecurityGroup
          - !Ref InfrastructureBaseSecurityGroup
          - !Ref ManagedSgTxToolingBaseSecurityGroup
        # Refer: https://repost.aws/knowledge-center/eks-worker-nodes-cluster
        UserData:
          Fn::Base64:
            Fn::Join:
              - ""
              - - "#!/bin/bash -xe\n"
                - "set -o xtrace"
                - "\n"
                - Fn::Join:
                    - " "
                    - - "/etc/eks/bootstrap.sh"
                      - Ref: KubernetesCluster
                - "\n"
                - "/opt/aws/bin/cfn-signal -e $? "
                - "         --stack ${self:service}-${self:provider.stage} "
                - "         --resource NodeGroup "
                - "         --region ${self:provider.region}"


    SpotNodeGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        DesiredCapacity: 1
        LaunchConfigurationName: !Ref SpotNodeLaunchConfig
        MinSize: 0
        MaxSize: 2
        VPCZoneIdentifier:
          - !Ref SubnetOne
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-nodes
            PropagateAtLaunch: true
          - Key:
              Fn::Join:
                - "/"
                - - "kubernetes.io"
                  - "cluster"
                  - "${self:service}-${self:provider.stage}"
            Value: 'owned'
            PropagateAtLaunch: 'true'
      UpdatePolicy:
        AutoScalingRollingUpdate:
          MinInstancesInService: 0
          MaxBatchSize: 1
  Outputs:
    KubernetesClusterName:
      Description: "EKS Cluster Name"
      Value: !Ref KubernetesCluster
    KubernetesClusterEndpoint:
      Description: Endpoint for your Kubernetes API server
      Value:
        Fn::GetAtt: [ KubernetesCluster, Endpoint ]
    KubernetesClusterCertificateAuthorityData:
      Description: Certificate authority data for your Kubernetes API server
      Value: !GetAtt KubernetesCluster.CertificateAuthorityData
    KubernetesClusterNodesRoleArn:
      Description: 'EKS Cluster Nodes Role Arn'
      Value: !GetAtt NodeInstanceRole.Arn